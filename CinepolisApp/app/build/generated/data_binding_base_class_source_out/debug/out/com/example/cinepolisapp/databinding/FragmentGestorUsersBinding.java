// Generated by view binder compiler. Do not edit!
package com.example.cinepolisapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cinepolisapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentGestorUsersBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button button12;

  @NonNull
  public final Button button13;

  @NonNull
  public final Button button14;

  @NonNull
  public final Button button15;

  @NonNull
  public final Button button6;

  @NonNull
  public final ImageView imageView8;

  @NonNull
  public final TextView locationTe4;

  private FragmentGestorUsersBinding(@NonNull ConstraintLayout rootView, @NonNull Button button12,
      @NonNull Button button13, @NonNull Button button14, @NonNull Button button15,
      @NonNull Button button6, @NonNull ImageView imageView8, @NonNull TextView locationTe4) {
    this.rootView = rootView;
    this.button12 = button12;
    this.button13 = button13;
    this.button14 = button14;
    this.button15 = button15;
    this.button6 = button6;
    this.imageView8 = imageView8;
    this.locationTe4 = locationTe4;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentGestorUsersBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentGestorUsersBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_gestor_users, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentGestorUsersBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button12;
      Button button12 = ViewBindings.findChildViewById(rootView, id);
      if (button12 == null) {
        break missingId;
      }

      id = R.id.button13;
      Button button13 = ViewBindings.findChildViewById(rootView, id);
      if (button13 == null) {
        break missingId;
      }

      id = R.id.button14;
      Button button14 = ViewBindings.findChildViewById(rootView, id);
      if (button14 == null) {
        break missingId;
      }

      id = R.id.button15;
      Button button15 = ViewBindings.findChildViewById(rootView, id);
      if (button15 == null) {
        break missingId;
      }

      id = R.id.button6;
      Button button6 = ViewBindings.findChildViewById(rootView, id);
      if (button6 == null) {
        break missingId;
      }

      id = R.id.imageView8;
      ImageView imageView8 = ViewBindings.findChildViewById(rootView, id);
      if (imageView8 == null) {
        break missingId;
      }

      id = R.id.location_te4;
      TextView locationTe4 = ViewBindings.findChildViewById(rootView, id);
      if (locationTe4 == null) {
        break missingId;
      }

      return new FragmentGestorUsersBinding((ConstraintLayout) rootView, button12, button13,
          button14, button15, button6, imageView8, locationTe4);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
